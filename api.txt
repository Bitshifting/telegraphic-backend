FORMAT: 1A
HOST: http://www.example.com
VERSION: 13

# telegraphic
Telegraphic is a collaborative image creation app which gives users only a short amount of time to contribute to a picture before it gets passed along to another user.

# Group User Accounts
When a user logs in, they receive an access token which must be sent with any other API request to identify the user.

## Register User [/user/register]

### Register [POST]
Register a user.

+ Request (application/json)

        { "username": "myNewUsername", "passwordHash": "some SHA-256 hash of the password", "phoneNumber": "1235550123" }

+ Response 200 (application/json)

        { "success": true, "message": "User registered." }
        
## Login [/user/login]

### Login [POST]
Log in as a user and receive an access token.

+ Request (application/json)

        { "username": "yourUsername", "passwordHash": "yourPasswordHash" }

+ Response 200 (application/json)

        { "accessToken": "someBase64SAccessToken", "success": true, "message": "logged in" }

## User List [/user/list]

### Get Users [GET]
+ Response 200 (application/json)

        { "success": true, "items": [
            {"username": "user1"},
            {"username": "user2"}
            ]
        }

### Get Users [POST]
Same as the GET version, except this excludes your own user in the user list.

+ Request (application/json)

        { "accessToken": "someBase64SAccessToken" }

+ Response 200 (application/json)

        { "success": true, "items": [
            {"username": "user1"},
            {"username": "user2"}
            ]
        }

# Group Image Handling
The first user will be responsible for creating the base image, including specifying restrictions on the image (like the number of seconds someone gets to contribute, the types of brushes and colors that can be used, etc.)

## Creation [/image/create]

### Create Initial Image [POST]
Todo here: Be able to specifiy restrictions on brushes, colors, line sizes, etc.

+ Request (application/json)

        { "accessToken": "someBase64SAccessToken", "editTime": 10, "hopsLeft": 6, "nextUser": "someOtherUsername", "image": "someBase64Image" }

+ Response 200 (application/json)

        { "success": true, "message": "Image created and next user will be alerted." }
       
## Updating [/image/update/{uuid}]
Using the ID that you get from a push notification or from querying images that belong to you (and are waiting for you to update), updates an image with a new version and pass it on to the next person.

### Update Image [POST]

+ Request (application/json)

        { "accessToken": "someUUIDAccessToken", "nextUser": "someOtherUsername", "image": "someBase64Image" }
        
+ Response 200 (application/json)

        { "success": true, "message": "Image passed along to the next user!" }
        
## Querying [/image/query]
If you don't receive push notifications, you can query to see if there are any images waiting for you to add on to. **The format of the image JSON objects in the `items` list is also the format you should expect for push notifications.** If an image has 0 hops left, it means it is ready for you to view. Todo: Restrictions on brushes being returned in these image objects.

### Query for Images [POST]

+ Request (application/json)

        { "accessToken": "someUUIDAccessToken" }
        
+ Response 200 (application/json)

        { "success": true, "items": [
            { "imageUUID": "someUUIDImageID", "previousUser": "someOtherUsername", "editTime": 10, "hopsLeft": 6, "image": "someBase64Image" },
            { "imageUUID": "someUUIDImageID", "previousUser": "someOtherUsername", "editTime": 10, "hopsLeft": 0, "image": "someBase64Image" }
            ]
        }

## Cleanup [/image/seen/{uuid}]
Once an image has been finished, and a user who contributed to the image has viewed it, that user should hit this endpoint to avoid being notified again about this image (otherwis it will stay in the alert queue).

### Seen Image [POST]

+ Request (application/json)

        { "accessToken": "someUUIDAccessToken" }

+ Response 200 (application/json)

        { "success": true, "message": "Successfully acknowledged image." }
        
# Group Friends
You can send telegraphics to any user you want if you specify their name, but it might be easier to keep track of your friends with a built-in friends list feature.

## Get Friends [/friends]

### Get Friends List [POST]

+ Request (application/json)

        { "accessToken": "someUUIDAccessToken" }

+ Response 200 (application/json)

        { "success": true, "items": [
            { "friend": "someOtherUsername" }
            { "friend": "someOtherUsername2" }
            ]
        }

## Add Friend [/friends/add/{username}]

Adds a friend by their username to your favorites/friends list. They don't know about this.

### Add Friend [POST]

+ Request (application/json)

        { "accessToken": "someUUIDAccessToken" }

+ Response 200 (application/json)

        { "success": true, "message": "Friend added!" }
